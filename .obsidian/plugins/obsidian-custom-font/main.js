/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FontPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  font: "None",
  processed_font: ""
};
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}
function applyCss(css) {
  const style = document.createElement("style");
  style.innerHTML = css;
  document.head.appendChild(style);
  const existingStyle = document.getElementById("custom-font-plugin-css");
  if (existingStyle) {
    existingStyle.remove();
  }
  style.id = "custom-font-plugin-css";
}
var FontPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    try {
      if (this.settings.font && this.settings.font.toLowerCase() != "none") {
        console.log("loading %s", this.settings.font);
        const path = ".obsidian/plugins/obsidian-custom-font/converted.css";
        if (this.settings.font == this.settings.processed_font && await this.app.vault.adapter.exists(path)) {
          const convertedCSS = await this.app.vault.adapter.read(
            path
          );
          console.log("css file %s loaded into memory", path);
          applyCss(convertedCSS);
        } else {
          new import_obsidian.Notice("Processing Font files");
          const file = ".obsidian/fonts/" + this.settings.font;
          const arrayBuffer = await this.app.vault.adapter.readBinary(file);
          const base64 = arrayBufferToBase64(arrayBuffer);
          const font_name = this.settings.font.replace(".woff", "");
          const cssString = `
  @font-face {
    font-family: '${font_name}';
    src: url(data:font/woff;base64,${base64})
  }
  :root {
	--default-font: ${font_name};
	--font-family-editor: ${font_name};
  }
`;
          this.app.vault.adapter.write(path, cssString);
          this.settings.processed_font = this.settings.font;
          await this.saveSettings();
          new import_obsidian.Notice("Processing Font Finished");
          await this.onload();
        }
      }
    } catch (error) {
      new import_obsidian.Notice(error);
    }
    this.addSettingTab(new FontSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3)
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FontSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const options = [{ name: "none", value: "None" }];
    try {
      const path = this.app.vault.adapter.getFullPath(".obsidian/fonts");
      const files = this.app.vault.adapter.fs.readdirSync(path);
      for (const file of files) {
        options.push({ name: file, value: file });
      }
    } catch (error) {
      console.log(error);
    }
    new import_obsidian.Setting(containerEl).setName("Font").setDesc("Choose font").addDropdown((dropdown) => {
      for (const opt of options) {
        dropdown.addOption(opt.name, opt.value);
      }
      dropdown.setValue(this.plugin.settings.font).onChange(async (value) => {
        this.plugin.settings.font = value;
        await this.plugin.saveSettings();
        await this.plugin.onload();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
