/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FontPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  font: "None",
  processed_font: ""
};
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}
function applyCss(css, css_id) {
  const style = document.createElement("style");
  style.innerHTML = css;
  document.head.appendChild(style);
  const existingStyle = document.getElementById(css_id);
  if (existingStyle) {
    existingStyle.remove();
  }
  style.id = css_id;
}
var FontPlugin = class extends import_obsidian.Plugin {
  async process_font() {
    await this.loadSettings();
    try {
      if (this.settings.font && this.settings.font.toLowerCase() != "none") {
        console.log("loading %s", this.settings.font);
        const font_family_name = this.settings.font.split(".")[0];
        const font_extension_name = this.settings.font.split(".")[1];
        const plugin_folder_path = ".obsidian/plugins/custom-font-loader";
        const css_font_path = `${plugin_folder_path}/${this.settings.font.toLowerCase().replace(".", "_")}.css`;
        if (this.settings.font != this.settings.processed_font || !await this.app.vault.adapter.exists(css_font_path)) {
          new import_obsidian.Notice("Processing Font files");
          const file = ".obsidian/fonts/" + this.settings.font;
          const arrayBuffer = await this.app.vault.adapter.readBinary(file);
          const base64 = arrayBufferToBase64(arrayBuffer);
          const css_type_font = {
            "woff": "font/woff",
            "ttf": "font/truetype",
            "woff2": "font/woff2"
          };
          const base64_css = `@font-face{
	font-family: '${font_family_name}';
	src: url(data:${css_type_font[font_extension_name]};base64,${base64});
}`;
          this.app.vault.adapter.write(css_font_path, base64_css);
          console.log("saved font %s into %s", font_family_name, css_font_path);
          this.settings.processed_font = this.settings.font;
          await this.saveSettings();
          console.log("Font CSS Saved into %s", css_font_path);
          await this.process_font();
        } else {
          const content = await this.app.vault.adapter.read(css_font_path);
          const cssString = `
					:root {
						--font-default: ${font_family_name};
						--default-font: ${font_family_name};
						--font-family-editor: ${font_family_name};
					}
					`;
          applyCss(content, "custom_font_base64");
          applyCss(cssString, "custom_font_general");
        }
      } else {
        applyCss("", "custom_font_base64");
        applyCss("", "custom_font_general");
      }
    } catch (error) {
      new import_obsidian.Notice(error);
    }
  }
  async onload() {
    this.process_font();
    this.addSettingTab(new FontSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FontSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    const infoContainer = containerEl.createDiv();
    infoContainer.setText("In Order to set the font, copy your font into '.obsidian/fonts/' directory.");
    const options = [{ name: "none", value: "None" }];
    try {
      const font_folder_path = ".obsidian/fonts";
      if (!await this.app.vault.adapter.exists(font_folder_path)) {
        await this.app.vault.adapter.mkdir(font_folder_path);
      }
      if (await this.app.vault.adapter.exists(font_folder_path)) {
        const files = await this.app.vault.adapter.list(font_folder_path);
        for (const file of files.files) {
          const file_name = file.split("/")[2];
          options.push({ name: file_name, value: file_name });
        }
      }
    } catch (error) {
      console.log(error);
    }
    new import_obsidian.Setting(containerEl).setName("Font").setDesc("Choose font").addDropdown((dropdown) => {
      for (const opt of options) {
        dropdown.addOption(opt.name, opt.value);
      }
      dropdown.setValue(this.plugin.settings.font).onChange(async (value) => {
        this.plugin.settings.font = value;
        await this.plugin.saveSettings();
        await this.plugin.process_font();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
