/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FontPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var plugin_name = "custom-font-loader";
var DEFAULT_SETTINGS = {
  font: "None",
  processed_font: ""
};
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}
var FontPlugin = class extends import_obsidian.Plugin {
  async process_font() {
    await this.loadSettings();
    try {
      if (this.settings.font && this.settings.font.toLowerCase() != "none") {
        console.log("loading %s", this.settings.font);
        const font_family_name = this.settings.font.split(".")[0];
        const path = `.obsidian/plugins/${plugin_name}/${this.settings.font}.css`;
        const snippets_folder_path = ".obsidian/snippets";
        if (!await this.app.vault.adapter.exists(snippets_folder_path)) {
          await this.app.vault.adapter.mkdir(snippets_folder_path);
        }
        const css_font_path = `${snippets_folder_path}/${this.settings.font}.css`;
        if (this.settings.font != this.settings.processed_font || !await this.app.vault.adapter.exists(css_font_path)) {
          new import_obsidian.Notice("Processing Font files");
          const file = ".obsidian/fonts/" + this.settings.font;
          const arrayBuffer = await this.app.vault.adapter.readBinary(file);
          const base64 = arrayBufferToBase64(arrayBuffer);
          const base64_css = `
					@font-face{
						font-family: '${font_family_name}';
						src: url(base64, ${base64});
					}`;
          const cssString = `
					:root {
						--font-default: ${font_family_name};
						--default-font: ${font_family_name};
						--font-family-editor: ${font_family_name};
					}
					`;
          this.app.vault.adapter.write(css_font_path, base64_css + cssString);
          console.log("saved font %s into %s", font_family_name, path);
          this.settings.processed_font = this.settings.font;
          await this.saveSettings();
          new import_obsidian.Notice("Font CSS saved into " + css_font_path);
        }
      }
    } catch (error) {
      new import_obsidian.Notice(error);
    }
  }
  async onload() {
    this.process_font();
    this.addSettingTab(new FontSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FontSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    const infoContainer = containerEl.createDiv();
    infoContainer.setText("In Order to set the font, copy your font into '.obsidian/fonts/' directory.");
    const options = [{ name: "none", value: "None" }];
    try {
      const font_folder_path = ".obsidian/fonts";
      if (!await this.app.vault.adapter.exists(font_folder_path)) {
        await this.app.vault.adapter.mkdir(font_folder_path);
      }
      if (await this.app.vault.adapter.exists(font_folder_path)) {
        const files = await this.app.vault.adapter.list(font_folder_path);
        for (const file of files.files) {
          const file_name = file.split("/")[2];
          options.push({ name: file_name, value: file_name });
        }
      }
    } catch (error) {
      console.log(error);
    }
    new import_obsidian.Setting(containerEl).setName("Font").setDesc("Choose font").addDropdown((dropdown) => {
      for (const opt of options) {
        dropdown.addOption(opt.name, opt.value);
      }
      dropdown.setValue(this.plugin.settings.font).onChange(async (value) => {
        this.plugin.settings.font = value;
        await this.plugin.saveSettings();
        await this.plugin.process_font();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcblx0QXBwLFxuXHROb3RpY2UsXG5cdFBsdWdpbixcblx0UGx1Z2luU2V0dGluZ1RhYixcblx0U2V0dGluZyxcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmNvbnN0IG15X2NzcyA9IGBib2R5IHtcblx0LS1mb250LWRlZmF1bHQ6ICd0ZXN0Jyxcblx0LS1mb250LW1vbm9zcGFjZS1kZWZhdWx0OiAnJyxcblx0LS1mb250LWludGVyZmFjZS1vdmVycmlkZTogJycsXG5cdC0tZm9udC10ZXh0LW92ZXJyaWRlOiAnJyxcblx0LS1mb250LW1vbm9zcGFjZS1vdmVycmlkZTogJycsXHRcbn1gXG5cbmNvbnN0IHBsdWdpbl9uYW1lID0gJ2N1c3RvbS1mb250LWxvYWRlcidcblxuaW50ZXJmYWNlIEZvbnRQbHVnaW5TZXR0aW5ncyB7XG5cdGZvbnQ6IHN0cmluZztcblx0cHJvY2Vzc2VkX2ZvbnQ6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRm9udFBsdWdpblNldHRpbmdzID0ge1xuXHRmb250OiBcIk5vbmVcIixcblx0cHJvY2Vzc2VkX2ZvbnQ6IFwiXCIsXG59O1xuXG5mdW5jdGlvbiBhcnJheUJ1ZmZlclRvQmFzZTY0KGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcblx0bGV0IGJpbmFyeSA9IFwiXCI7XG5cdGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcblx0XHRiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG5cdH1cblx0cmV0dXJuIGJ0b2EoYmluYXJ5KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlDc3MoY3NzOiBzdHJpbmcsY3NzX2lkOnN0cmluZykge1xuXHQvLyBDcmVhdGUgc3R5bGUgdGFnXG5cdGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdC8vIEFkZCBDU1MgY29udGVudFxuXHRzdHlsZS5pbm5lckhUTUwgPSBjc3M7XG5cblx0Ly8gQXBwZW5kIHN0eWxlIHRhZyB0byBoZWFkXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG5cdC8vIE9wdGlvbmFsOiBSZW1vdmUgZXhpc3RpbmcgY3VzdG9tIENTU1xuXHRjb25zdCBleGlzdGluZ1N0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY3NzX2lkKTtcblx0aWYgKGV4aXN0aW5nU3R5bGUpIHtcblx0XHRleGlzdGluZ1N0eWxlLnJlbW92ZSgpO1xuXHR9XG5cblx0Ly8gR2l2ZSBJRCB0byBuZXcgc3R5bGUgdGFnXG5cdHN0eWxlLmlkID0gY3NzX2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb250UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IEZvbnRQbHVnaW5TZXR0aW5ncztcblxuXHRhc3luYyBwcm9jZXNzX2ZvbnQoKXtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5mb250ICYmXG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MuZm9udC50b0xvd2VyQ2FzZSgpICE9IFwibm9uZVwiXG5cdFx0XHQpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2xvYWRpbmcgJXMnLCB0aGlzLnNldHRpbmdzLmZvbnQpXG5cdFx0XHRcdGNvbnN0IGZvbnRfZmFtaWx5X25hbWUgPSB0aGlzLnNldHRpbmdzLmZvbnQuc3BsaXQoJy4nKVswXVxuXHRcdFx0XHQvLyBDaGVjayBpZiBjb252ZXJ0ZWQgZm9udCBleGlzdHNcblx0XHRcdFx0Y29uc3QgcGF0aCA9IGAub2JzaWRpYW4vcGx1Z2lucy8ke3BsdWdpbl9uYW1lfS8ke3RoaXMuc2V0dGluZ3MuZm9udH0uY3NzYFxuXHRcdFx0XHRcblx0XHRcdFx0Y29uc3Qgc25pcHBldHNfZm9sZGVyX3BhdGggPSAnLm9ic2lkaWFuL3NuaXBwZXRzJ1xuXHRcdFx0XHRpZiAoIWF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHNuaXBwZXRzX2ZvbGRlcl9wYXRoKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIubWtkaXIoc25pcHBldHNfZm9sZGVyX3BhdGgpXG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgY3NzX2ZvbnRfcGF0aCA9IGAke3NuaXBwZXRzX2ZvbGRlcl9wYXRofS8ke3RoaXMuc2V0dGluZ3MuZm9udH0uY3NzYFxuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuZm9udCAhPSB0aGlzLnNldHRpbmdzLnByb2Nlc3NlZF9mb250IHx8ICFhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhjc3NfZm9udF9wYXRoKSkge1xuXHRcdFx0XHRcdG5ldyBOb3RpY2UoXCJQcm9jZXNzaW5nIEZvbnQgZmlsZXNcIik7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9ICcub2JzaWRpYW4vZm9udHMvJyArIHRoaXMuc2V0dGluZ3MuZm9udFxuXHRcdFx0XHRcdGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkQmluYXJ5KGZpbGUpO1xuXG5cdFx0XHRcdFx0Ly8gQ29udmVydCB0byBiYXNlNjRcblx0XHRcdFx0XHRjb25zdCBiYXNlNjQgPSBhcnJheUJ1ZmZlclRvQmFzZTY0KGFycmF5QnVmZmVyKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRjb25zdCBiYXNlNjRfY3NzID0gYFxuXHRcdFx0XHRcdEBmb250LWZhY2V7XG5cdFx0XHRcdFx0XHRmb250LWZhbWlseTogJyR7Zm9udF9mYW1pbHlfbmFtZX0nO1xuXHRcdFx0XHRcdFx0c3JjOiB1cmwoYmFzZTY0LCAke2Jhc2U2NH0pO1xuXHRcdFx0XHRcdH1gIFxuXHRcdFx0XHRcdGNvbnN0IGNzc1N0cmluZyA9IGBcblx0XHRcdFx0XHQ6cm9vdCB7XG5cdFx0XHRcdFx0XHQtLWZvbnQtZGVmYXVsdDogJHtmb250X2ZhbWlseV9uYW1lfTtcblx0XHRcdFx0XHRcdC0tZGVmYXVsdC1mb250OiAke2ZvbnRfZmFtaWx5X25hbWV9O1xuXHRcdFx0XHRcdFx0LS1mb250LWZhbWlseS1lZGl0b3I6ICR7Zm9udF9mYW1pbHlfbmFtZX07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGA7XG5cdFx0XHRcdFx0dGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZShjc3NfZm9udF9wYXRoLGJhc2U2NF9jc3MrY3NzU3RyaW5nKVxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdzYXZlZCBmb250ICVzIGludG8gJXMnLGZvbnRfZmFtaWx5X25hbWUscGF0aClcblxuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MucHJvY2Vzc2VkX2ZvbnQgPSB0aGlzLnNldHRpbmdzLmZvbnRcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpXG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIkZvbnQgQ1NTIHNhdmVkIGludG8gXCIrY3NzX2ZvbnRfcGF0aClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdG5ldyBOb3RpY2UoZXJyb3IpO1xuXHRcdH1cblxuXHR9XG5cblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMucHJvY2Vzc19mb250KClcblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdFxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgRm9udFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkgeyB9XG5cblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKFxuXHRcdFx0e30sXG5cdFx0XHRERUZBVUxUX1NFVFRJTkdTLFxuXHRcdFx0YXdhaXQgdGhpcy5sb2FkRGF0YSgpXG5cdFx0KTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG5cbmNsYXNzIEZvbnRTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogRm9udFBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBGb250UGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0YXN5bmMgZGlzcGxheSgpIHtcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnN0IGluZm9Db250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoKTtcblx0XHRpbmZvQ29udGFpbmVyLnNldFRleHQoXCJJbiBPcmRlciB0byBzZXQgdGhlIGZvbnQsIGNvcHkgeW91ciBmb250IGludG8gJy5vYnNpZGlhbi9mb250cy8nIGRpcmVjdG9yeS5cIik7XG5cblx0XHRjb25zdCBvcHRpb25zID0gW3sgbmFtZTogXCJub25lXCIsIHZhbHVlOiBcIk5vbmVcIiB9XTtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZm9udF9mb2xkZXJfcGF0aCA9ICcub2JzaWRpYW4vZm9udHMnXG5cdFx0XHRpZiAoIWF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKGZvbnRfZm9sZGVyX3BhdGgpKVxuXHRcdFx0e1xuXHRcdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLm1rZGlyKGZvbnRfZm9sZGVyX3BhdGgpXG5cdFx0XHR9XG5cdFx0XHRpZiAoYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9udF9mb2xkZXJfcGF0aCkpIHtcblx0XHRcdFx0Y29uc3QgZmlsZXMgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmxpc3QoZm9udF9mb2xkZXJfcGF0aClcblxuXHRcdFx0XHQvLyBBZGQgZmlsZXMgYXMgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMuZmlsZXMpIHtcblx0XHRcdFx0XHRjb25zdCBmaWxlX25hbWUgPSBmaWxlLnNwbGl0KCcvJylbMl1cblx0XHRcdFx0XHRvcHRpb25zLnB1c2goeyBuYW1lOiBmaWxlX25hbWUsIHZhbHVlOiBmaWxlX25hbWUgfSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXG5cdFx0fVxuXHRcdGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5sb2coZXJyb3IpXG5cdFx0fVxuXHRcdC8vIFNob3cgY29tYm8gYm94IGluIFVJIHNvbWVob3dcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiRm9udFwiKVxuXHRcdFx0LnNldERlc2MoXCJDaG9vc2UgZm9udFwiKVxuXHRcdFx0LmFkZERyb3Bkb3duKChkcm9wZG93bikgPT4ge1xuXHRcdFx0XHQvLyBBZGQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKGNvbnN0IG9wdCBvZiBvcHRpb25zKSB7XG5cdFx0XHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKG9wdC5uYW1lLCBvcHQudmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRyb3Bkb3duXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbnQpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9udCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5wcm9jZXNzX2ZvbnQoKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFNTztBQVVQLElBQU0sY0FBYztBQU9wQixJQUFNLG1CQUF1QztBQUFBLEVBQzVDLE1BQU07QUFBQSxFQUNOLGdCQUFnQjtBQUNqQjtBQUVBLFNBQVMsb0JBQW9CLFFBQXFCO0FBQ2pELE1BQUksU0FBUztBQUNiLFFBQU0sUUFBUSxJQUFJLFdBQVcsTUFBTTtBQUNuQyxXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sWUFBWSxLQUFLO0FBQzFDLGNBQVUsT0FBTyxhQUFhLE1BQU0sQ0FBQyxDQUFDO0FBQUEsRUFDdkM7QUFDQSxTQUFPLEtBQUssTUFBTTtBQUNuQjtBQXNCQSxJQUFxQixhQUFyQixjQUF3Qyx1QkFBTztBQUFBLEVBRzlDLE1BQU0sZUFBYztBQUNuQixVQUFNLEtBQUssYUFBYTtBQUV4QixRQUFJO0FBQ0gsVUFDQyxLQUFLLFNBQVMsUUFDZCxLQUFLLFNBQVMsS0FBSyxZQUFZLEtBQUssUUFDbkM7QUFDRCxnQkFBUSxJQUFJLGNBQWMsS0FBSyxTQUFTLElBQUk7QUFDNUMsY0FBTSxtQkFBbUIsS0FBSyxTQUFTLEtBQUssTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUV4RCxjQUFNLE9BQU8scUJBQXFCLGVBQWUsS0FBSyxTQUFTO0FBRS9ELGNBQU0sdUJBQXVCO0FBQzdCLFlBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxNQUFNLFFBQVEsT0FBTyxvQkFBb0IsR0FDN0Q7QUFDQyxnQkFBTSxLQUFLLElBQUksTUFBTSxRQUFRLE1BQU0sb0JBQW9CO0FBQUEsUUFDeEQ7QUFDQSxjQUFNLGdCQUFnQixHQUFHLHdCQUF3QixLQUFLLFNBQVM7QUFFL0QsWUFBSSxLQUFLLFNBQVMsUUFBUSxLQUFLLFNBQVMsa0JBQWtCLENBQUMsTUFBTSxLQUFLLElBQUksTUFB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
