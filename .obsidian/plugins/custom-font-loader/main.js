/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FontPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var plugin_name = "custom-font-loader";
var DEFAULT_SETTINGS = {
  font: "None",
  processed_font: ""
};
function arrayBufferToBase64(buffer) {
  let binary = "";
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}
function applyCss(css, css_id) {
  const style = document.createElement("style");
  style.innerHTML = css;
  document.head.appendChild(style);
  const existingStyle = document.getElementById(css_id);
  if (existingStyle) {
    existingStyle.remove();
  }
  style.id = css_id;
}
var FontPlugin = class extends import_obsidian.Plugin {
  async process_font() {
    await this.loadSettings();
    try {
      if (this.settings.font && this.settings.font.toLowerCase() != "none") {
        console.log("loading %s", this.settings.font);
        const font_family_name = this.settings.font.split(".")[0];
        const path = `.obsidian/plugins/${plugin_name}/${this.settings.font}.css`;
        if (this.settings.font == this.settings.processed_font && await this.app.vault.adapter.exists(path)) {
          const convertedCSS = await this.app.vault.adapter.read(
            path
          );
          console.log("css file %s loaded into memory", path);
          applyCss(convertedCSS, "custom-font-plugin-css");
          const cssString = `
					:root {
						--font-default: '${font_family_name}';
						--default-font: '${font_family_name}';
						--font-family-editor: '${font_family_name}';
					}
					`;
          applyCss(cssString, "custom-font-apply");
        } else {
          new import_obsidian.Notice("Processing Font files");
          const file = ".obsidian/fonts/" + this.settings.font;
          const arrayBuffer = await this.app.vault.adapter.readBinary(file);
          const base64 = arrayBufferToBase64(arrayBuffer);
          const base64_css = `
					@font-face{
						font-family: '${font_family_name}';
						src: url(base64, ${base64});
					}`;
          this.app.vault.adapter.write(path, base64_css);
          console.log("saved font %s into %s", font_family_name, path);
          this.settings.processed_font = this.settings.font;
          await this.saveSettings();
          new import_obsidian.Notice("Processing Font Finished");
          await this.process_font();
        }
      } else {
        applyCss("", "custom-font-plugin-css");
        applyCss("", "custom-font-apply");
      }
    } catch (error) {
      new import_obsidian.Notice(error);
    }
  }
  async onload() {
    this.process_font();
    this.addSettingTab(new FontSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var FontSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    const infoContainer = containerEl.createDiv();
    infoContainer.setText("In Order to set the font, copy your font into '.obsidian/fonts/' directory.");
    const options = [{ name: "none", value: "None" }];
    try {
      const font_folder_path = ".obsidian/fonts";
      if (await this.app.vault.adapter.exists(font_folder_path)) {
        const files = await this.app.vault.adapter.list(font_folder_path);
        for (const file of files.files) {
          const file_name = file.split("/")[2];
          options.push({ name: file_name, value: file_name });
        }
      } else {
        await this.app.vault.adapter.mkdir(".obsidian/fonts");
      }
    } catch (error) {
      console.log(error);
    }
    new import_obsidian.Setting(containerEl).setName("Font").setDesc("Choose font").addDropdown((dropdown) => {
      for (const opt of options) {
        dropdown.addOption(opt.name, opt.value);
      }
      dropdown.setValue(this.plugin.settings.font).onChange(async (value) => {
        this.plugin.settings.font = value;
        await this.plugin.saveSettings();
        await this.plugin.process_font();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
